/*
 * pg9616.cpp
 *
 *  Created on: Oct 8, 2008
 *      Author: bistromath
 */

extern "C" {
#include "stm32f10x.h"
#include "stm32f10x_conf.h"
#include <stdlib.h>
#include <string.h>
#include <math.h>
}

#include "pg9616.hpp"

void pg9616::select(u8 display)
{
}

void pg9616::select_all(void) {
}

void pg9616::init(void)
{
    extern void delay_ms(u16);
    extern void delay_us(u32);

    I2C_InitTypeDef i2cinit;

    I2C_Cmd(i2cdev, ENABLE);
    i2cinit.I2C_Mode = I2C_Mode_I2C;
    i2cinit.I2C_DutyCycle = I2C_DutyCycle_2; //using 16_9 makes display corruption worse, perhaps we are clocking in on the wrong edge?
    i2cinit.I2C_Ack = I2C_Ack_Disable;
    i2cinit.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
    i2cinit.I2C_ClockSpeed = 100000; //1200000 max but using 1200000 is probably not too wise
    i2cinit.I2C_OwnAddress1 = 0x0000; //why do i care?

    I2C_Init(i2cdev, &i2cinit);
    I2C_StretchClockCmd(i2cdev, ENABLE);

    memset(printbuf, 0x00, NUM_DISPLAYS*96*2);
    memset(dblbuf, 0x00, NUM_DISPLAYS*96*2);

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = resetpin.pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_Init(resetpin.port, &GPIO_InitStructure);

    GPIO_ResetBits(resetpin.port, resetpin.pin);
    delay_us(4);
    GPIO_SetBits(resetpin.port, resetpin.pin);
    delay_us(4);

    select_all();
    OLED_Init();
    while(busy());

    //here we want to start the reluctant charge pumps
    select_all();
    Fill_RAM(0xAA);

    for(int i = 0; i < 3; i++) {
        Set_Charge_Pump(0x00);
        delay_ms(20);
        Set_Charge_Pump(0x04);
        delay_ms(20);
    }

    Fill_RAM(0x00);
    select(0);
}

void pg9616::OLED_Init(void)
{
    extern void delay_ms(u16 delay);

    Set_Display_On_Off(0x00); // Display Off (0x00/0x01)
    Set_Display_Clock(0xA2); // Set Clock as 120 Frames/Sec (0xA2)
    Set_Multiplex_Ratio(0x0F); // 1/16 Duty (0x0F~0x3F)
    Set_Display_Offset(0x00); // Shift Mapping RAM Counter (0x00~0x3F)
    Set_Start_Line(0x00); // Set Mapping RAM Display Start Line (0x00~0x3F)
    Set_Charge_Pump(0x04); // Enable Embedded DC/DC Converter (0x00/0x04)
    Set_Power_Save(0x00); // Set Low Power Save Mode
    Set_Addressing_Mode(0x02); // Set Page Addressing Mode (0x00/0x01/0x02)
    Set_Segment_Remap(0x01); // Set SEG/Column Mapping (0x00/0x01)
    Set_Common_Remap(0x08); // Set COM/Row Scan Direction (0x00/0x08)
    Set_Common_Config(0x00); // Set Sequential Configuration (0x00/0x10)
    Set_Contrast_Control(0xFF); // Set SEG Output Current 0xFF OK
    Set_Precharge_Period(0xD2); // Set Pre-Charge as 13 Clocks & Discharge as 2 Clock 0xD2 default
    Set_VCOMH(0x20); // Set VCOM Deselect Level
    Set_Entire_Display(0x00); // Disable Entire Display On (0x00/0x01)
    Set_Inverse_Display(0x00);

    Fill_RAM(0x00);

    delay_ms(10);
    Set_Display_On_Off(0x01); // Display On (0x00/0x01)
}

void pg9616::Fill_RAM(unsigned char Data)
{
	unsigned char i;
	u8 buf[128];
	memset(buf, Data, 128);

	for(i=0;i<8;i++)
	{
		Set_Start_Page(i);
		Set_Start_Column(0x00);
		Write_Data(buf, 128);
	}
}

void pg9616::Show_Pattern(u8 display, const unsigned char Data_Pointer[][2], unsigned char start_page, unsigned char start_col, unsigned char width)
{
    for(int i=0; i<width; i++) { printbuf[display][start_page][start_col+i] = Data_Pointer[i][0]; }
    for(int i=0; i<width; i++) { printbuf[display][start_page+1][start_col+i] = Data_Pointer[i][1]; }
//	memcpy(&printbuf[display][start_page][start_col], &Data_Pointer[0][0], width);
//	memcpy(&printbuf[display][start_page+1][start_col], &Data_Pointer[0][1], width);
}

void pg9616::print(u8 display, const char *string, Display_FontSizeTypeDef font, u8 line, u8 start_pos, s8 offset)
{
	//this version will print to a buffer instead of printing in real-time. the buffer gets diff'ed with the current screen and sent by calling ::update().
	//we are not invoking sprintf() because it's huge and it sucks.
	//DO NOT FORGET TO CALL THIS WITH A NULL-TERMINATED STRING! Const strings are null-terminated by the compiler.
	u8 i = 0;
    switch(font) {
	default:
	case Font_Small:
		i = start_pos * (FONT_SMALL_WIDTH+1)+offset;
		while(*string) {
			for(int j=0; j < FONT_SMALL_WIDTH; j++) {
				printbuf[display][line][i+j] = smallfont[*string-32][j];
			}
			printbuf[display][line][i+FONT_SMALL_WIDTH] = 0x00;
			i += FONT_SMALL_WIDTH + 1;
			string++;
		}
		break;

	case Font_Large:
		i = start_pos * (FONT_LARGE_WIDTH + FONT_LARGE_CHAR_SPACING);
		while(*string) {
			for(int j=0; j < FONT_LARGE_WIDTH; j++) {
				printbuf[display][line][i+j] = largefont[*string-32][j][0];
				printbuf[display][line+1][i+j] = largefont[*string-32][j][1];
			}
			for(int k = 0; k < FONT_LARGE_CHAR_SPACING; k++) {
				printbuf[display][line][i+FONT_LARGE_WIDTH+k] = 0x00;
				printbuf[display][line+1][i+FONT_LARGE_WIDTH+k] = 0x00;
			}
			i += FONT_LARGE_WIDTH + FONT_LARGE_CHAR_SPACING;
			string++;
		}
		break;
	}
}

void pg9616::update(u8 display) {
	//this does diffs against the last sent screens, and sends required data out to the display.
	u8 txbuffer[99];
	u8 txpos = 0x00;
	u8 current_page = 0xFF;
	u8 current_display = 0xFF;
	//select(display);
	for(int k = 0; k < 2; k++) { //k over 2 pages to display (not using pages 2 and 3)
		//Set_Start_Page(k); //right now this is repeated 2x every update, and doesn't have to be.
		for(int j = 0; j < 96; j++) { //j over columns
			//diffs[i][j][k] = printbuf[i][j][k] ^ dblbuf[i][j][k];
			if(printbuf[display][k][j] != dblbuf[display][k][j]) { //if there's a difference between the current print buffer and the last sent buffer at this column
				if(txpos == 0) { //this means this is the first in a series of contiguous differences
					//if(current_display != display) { //we'll select() the proper display since we'll have to send data, avoids unnecessary select() calls
					//	select(display);
					//	current_display = display;
					//}
					if(current_page != k) {
						Set_Start_Page(k);
						current_page = k;
					}
					Set_Start_Column(j); //set a start column for the txbuffer
				}
				txbuffer[txpos++] = printbuf[display][k][j];
			} else {
				if(txpos != 0) { //there's data to send
					//here we send data
					Write_Data(txbuffer, txpos);
					txpos = 0;
				}
			}
		}
		if(txpos != 0) { //takes care of the tail case where printbuf[x][96][x] != dblbuf[x][96][x]
			Write_Data(txbuffer, txpos);
			txpos = 0;
		}
	}

	memcpy(&dblbuf[display][0][0], &printbuf[display][0][0], 96*2);
	//memset(&printbuf[display][0][0], 0x00, 96*2);
}

void pg9616::update(void){
	for(int i = 0; i < NUM_DISPLAYS; i++) {
		update(i);
	}
}

void pg9616::print(u8 display, float number, Display_FontSizeTypeDef font, u8 width, u8 start_page, u8 start_col, bool plusminus, u8 max_decimals, s8 offset)
{
	char str[20];
	unsigned char index, i=0;
	unsigned long integer;

	if(number<0) {
		str[i++] = '-';
		number = 0 - number;
	} else {
		if(plusminus) str[i++] = '+';
	}

	integer = number;

	int digits = 0;

	do {
		digits++;
		integer /= 10;
	} while (integer != 0);

	//now "digits" has the number of integer digits in the number. given this and the "width" parameter, we can calculate the number of decimal digits we can
	//display. at this point, i contains the result of the plusminus thing, and can be used to calculate width.
	//for our uses, we want to right-justify to width. is this true? for K, yes. for duv, yes. for brightness, yes. for hue, yes. okay, let's say it's true.
	//if rounding results in a whole number, or zeroes out to width, do we truncate? for duv, no. for hue, yes.
	//for hue we want 0.0, 360.0, just a fixed precision. for duv we want the same. for percent, we want a fixed precision except where width would truncate the
	//100.0% to 100.%
	//would it work to have a max decimal parameter, which would limit precision to x digits after the decimal? combined with the width field, this would do it.
	//whichever is less, calculated decimal width or max_decimal.

	//right.

	int decimal_width = width - i - 1 - digits; //the 1 is for the decimal point. how do we truncate the decimal point? just don't add it if decimal_width <= 0.

	while(decimal_width > int(max_decimals)) {
		str[i++] = ' ';
		decimal_width--; //so we can right-justify
	}

	//here print the decimal part in the appropriate place
	if(decimal_width <= 0) {
		str[i++] = ' '; //right-justify to take care of the missing decimal point
		integer = (number + 0.5); //round it off if there are no decimals
	} else integer = number;

	long dec_exp = 1;
	for(int i = 0; i < decimal_width; i++) dec_exp *= 10;
	float decimal = number - int(number); //remove the integer part
	decimal = ((decimal * dec_exp) + 0.5) / float(dec_exp); //round to sig figs so you don't print 0.99999999.....
	if(decimal >= 1) {
		decimal -= 1.00;
		integer += 1;
	}

	index = 20;
	do {
	  str[--index] = '0' + integer % 10;
	  integer /= 10;
	} while (integer != 0);
	do { //left-justify
	    str[i++] = str[index++];
	} while ( index < 20 );

	//now i has the position of the decimal point, if any
	if(i < width) {
		str[i++] = '.';
	}

	while(i<width) {
		decimal *= 10; //so now decimal is 10
		str[i++] = int(decimal) + '0'; //int(10) + '0' is ':'
		decimal = decimal - int(decimal);
	}
	str[i] = 0x00;
	print(display, str, font, start_page, start_col, offset);
}

void pg9616::print(u8 display, signed long number, Display_FontSizeTypeDef font, u8 width, u8 start_page, u8 start_col, s8 offset)
{
	print_base(display, number, 10, font, width, start_page, start_col, offset);
}

void pg9616::print_base(u8 display, signed long number, u8 base, Display_FontSizeTypeDef font, u8 width, u8 start_page, u8 start_col, s8 offset)
{
	char str[10];
	u8 digits=0;
	signed long j=number;

	while(j) { //get the number of digits
		digits++;
		j /= base;
	}
	if(number == 0) digits = 1; //manual
	if(number < 0) digits++; //take care of the '-' sign
	if(digits > width) return; //should throw an exception but whatever

	u8 temp = width-digits;
	itoa(number, str + temp, base);

	while(temp) {
		str[--temp] = ' ';
	}

	print(display, str, font, start_page, start_col, offset);

}

/* reverse:  reverse string s in place */
void pg9616::reverse(char s[])
{
    int c, i, j;

    for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
        c = s[i];
        s[i] = s[j];
        s[j] = c;
    }
}

char *pg9616::itoa(signed long value, char *result, int base)
{
	// check that the base if valid
	if (base < 2 || base > 16) { *result = 0; return result; }

	char* out = result;
	signed long quotient = value;

	do {
		*out = "0123456789ABCDEF"[ abs(quotient % base) ];
		++out;
		quotient /= base;
	} while ( quotient );

	// Only apply negative sign for base 10
	if ( value < 0 && base == 10) *out++ = '-';

	*out = 0;
	reverse( result );

	return result;

}

const unsigned char pg9616::smallfont[241][5] = {// Refer to "Times New Roman" Font Database...
		//   Basic Characters
		{0x00,0x00,0x00,0x00,0x00},		//
		{0x00,0x00,0x4F,0x00,0x00},		//   (  1)  ! - 0x0021 Exclamation Mark
		{0x00,0x07,0x00,0x07,0x00},		//   (  2)  " - 0x0022 Quotation Mark
		{0x14,0x7F,0x14,0x7F,0x14},		//   (  3)  # - 0x0023 Number Sign
		{0x24,0x2A,0x7F,0x2A,0x12},		//   (  4)  $ - 0x0024 Dollar Sign
		{0x23,0x13,0x08,0x64,0x62},		//   (  5)  % - 0x0025 Percent Sign
		{0x36,0x49,0x55,0x22,0x50},		//   (  6)  & - 0x0026 Ampersand
		{0x00,0x05,0x03,0x00,0x00},		//   (  7)  ' - 0x0027 Apostrophe
		{0x00,0x1C,0x22,0x41,0x00},		//   (  8)  ( - 0x0028 Left Parenthesis
		{0x00,0x41,0x22,0x1C,0x00},		//   (  9)  ) - 0x0029 Right Parenthesis
		{0x14,0x08,0x3E,0x08,0x14},		//   ( 10)  * - 0x002A Asterisk
		{0x08,0x08,0x3E,0x08,0x08},		//   ( 11)  + - 0x002B Plus Sign
		{0x00,0x50,0x30,0x00,0x00},		//   ( 12)  , - 0x002C Comma
		{0x08,0x08,0x08,0x08,0x08},		//   ( 13)  - - 0x002D Hyphen-Minus
		{0x00,0x60,0x60,0x00,0x00},		//   ( 14)  . - 0x002E Full Stop
		{0x20,0x10,0x08,0x04,0x02},		//   ( 15)  / - 0x002F Solidus
		{0x3E,0x51,0x49,0x45,0x3E},		//   ( 16)  0 - 0x0030 Digit Zero
		{0x00,0x42,0x7F,0x40,0x00},		//   ( 17)  1 - 0x0031 Digit One
		{0x42,0x61,0x51,0x49,0x46},		//   ( 18)  2 - 0x0032 Digit Two
		{0x21,0x41,0x45,0x4B,0x31},		//   ( 19)  3 - 0x0033 Digit Three
		{0x18,0x14,0x12,0x7F,0x10},		//   ( 20)  4 - 0x0034 Digit Four
		{0x27,0x45,0x45,0x45,0x39},		//   ( 21)  5 - 0x0035 Digit Five
		{0x3C,0x4A,0x49,0x49,0x30},		//   ( 22)  6 - 0x0036 Digit Six
		{0x01,0x71,0x09,0x05,0x03},		//   ( 23)  7 - 0x0037 Digit Seven
		{0x36,0x49,0x49,0x49,0x36},		//   ( 24)  8 - 0x0038 Digit Eight
		{0x06,0x49,0x49,0x29,0x1E},		//   ( 25)  9 - 0x0039 Dight Nine
		{0x00,0x36,0x36,0x00,0x00},		//   ( 26)  : - 0x003A Colon
		{0x00,0x56,0x36,0x00,0x00},		//   ( 27)  ; - 0x003B Semicolon
		{0x08,0x14,0x22,0x41,0x00},		//   ( 28)  < - 0x003C Less-Than Sign
		{0x14,0x14,0x14,0x14,0x14},		//   ( 29)  = - 0x003D Equals Sign
		{0x00,0x41,0x22,0x14,0x08},		//   ( 30)  > - 0x003E Greater-Than Sign
		{0x02,0x01,0x51,0x09,0x06},		//   ( 31)  ? - 0x003F Question Mark
		{0x32,0x49,0x79,0x41,0x3E},		//   ( 32)  @ - 0x0040 Commercial At
		{0x7E,0x11,0x11,0x11,0x7E},		//   ( 33)  A - 0x0041 Latin Capital Letter A
		{0x7F,0x49,0x49,0x49,0x36},		//   ( 34)  B - 0x0042 Latin Capital Letter B
		{0x3E,0x41,0x41,0x41,0x22},		//   ( 35)  C - 0x0043 Latin Capital Letter C
		{0x7F,0x41,0x41,0x22,0x1C},		//   ( 36)  D - 0x0044 Latin Capital Letter D
		{0x7F,0x49,0x49,0x49,0x41},		//   ( 37)  E - 0x0045 Latin Capital Letter E
		{0x7F,0x09,0x09,0x09,0x01},		//   ( 38)  F - 0x0046 Latin Capital Letter F
		{0x3E,0x41,0x49,0x49,0x7A},		//   ( 39)  G - 0x0047 Latin Capital Letter G
		{0x7F,0x08,0x08,0x08,0x7F},		//   ( 40)  H - 0x0048 Latin Capital Letter H
		{0x00,0x41,0x7F,0x41,0x00},		//   ( 41)  I - 0x0049 Latin Capital Letter I
		{0x20,0x40,0x41,0x3F,0x01},		//   ( 42)  J - 0x004A Latin Capital Letter J
		{0x7F,0x08,0x14,0x22,0x41},		//   ( 43)  K - 0x004B Latin Capital Letter K
		{0x7F,0x40,0x40,0x40,0x40},		//   ( 44)  L - 0x004C Latin Capital Letter L
		{0x7F,0x02,0x0C,0x02,0x7F},		//   ( 45)  M - 0x004D Latin Capital Letter M
		{0x7F,0x04,0x08,0x10,0x7F},		//   ( 46)  N - 0x004E Latin Capital Letter N
		{0x3E,0x41,0x41,0x41,0x3E},		//   ( 47)  O - 0x004F Latin Capital Letter O
		{0x7F,0x09,0x09,0x09,0x06},		//   ( 48)  P - 0x0050 Latin Capital Letter P
		{0x3E,0x41,0x51,0x21,0x5E},		//   ( 49)  Q - 0x0051 Latin Capital Letter Q
		{0x7F,0x09,0x19,0x29,0x46},		//   ( 50)  R - 0x0052 Latin Capital Letter R
		{0x46,0x49,0x49,0x49,0x31},		//   ( 51)  S - 0x0053 Latin Capital Letter S
		{0x01,0x01,0x7F,0x01,0x01},		//   ( 52)  T - 0x0054 Latin Capital Letter T
		{0x3F,0x40,0x40,0x40,0x3F},		//   ( 53)  U - 0x0055 Latin Capital Letter U
		{0x1F,0x20,0x40,0x20,0x1F},		//   ( 54)  V - 0x0056 Latin Capital Letter V
		{0x3F,0x40,0x38,0x40,0x3F},		//   ( 55)  W - 0x0057 Latin Capital Letter W
		{0x63,0x14,0x08,0x14,0x63},		//   ( 56)  X - 0x0058 Latin Capital Letter X
		{0x07,0x08,0x70,0x08,0x07},		//   ( 57)  Y - 0x0059 Latin Capital Letter Y
		{0x61,0x51,0x49,0x45,0x43},		//   ( 58)  Z - 0x005A Latin Capital Letter Z
		{0x00,0x7F,0x41,0x41,0x00},		//   ( 59)  [ - 0x005B Left Square Bracket
		{0x02,0x04,0x08,0x10,0x20},		//   ( 60)  \ - 0x005C Reverse Solidus
		{0x00,0x41,0x41,0x7F,0x00},		//   ( 61)  ] - 0x005D Right Square Bracket
		{0x0C,0x0A,0x09,0x0A,0x0C},		//   ( 62)  ^ - 0x005E Circumflex Accent
		{0x40,0x40,0x40,0x40,0x40},		//   ( 63)  _ - 0x005F Low Line
		{0x01,0x02,0x04,0x00,0x00},		//   ( 64)  ` - 0x0060 Grave Accent
		{0x20,0x54,0x54,0x54,0x78},		//   ( 65)  a - 0x0061 Latin Small Letter A
		{0x7F,0x48,0x44,0x44,0x38},		//   ( 66)  b - 0x0062 Latin Small Letter B
		{0x38,0x44,0x44,0x44,0x20},		//   ( 67)  c - 0x0063 Latin Small Letter C
		{0x38,0x44,0x44,0x48,0x7F},		//   ( 68)  d - 0x0064 Latin Small Letter D
		{0x38,0x54,0x54,0x54,0x18},		//   ( 69)  e - 0x0065 Latin Small Letter E
		{0x08,0x7E,0x09,0x01,0x02},		//   ( 70)  f - 0x0066 Latin Small Letter F
		{0x06,0x49,0x49,0x49,0x3F},		//   ( 71)  g - 0x0067 Latin Small Letter G
		{0x7F,0x08,0x04,0x04,0x78},		//   ( 72)  h - 0x0068 Latin Small Letter H
		{0x00,0x44,0x7D,0x40,0x00},		//   ( 73)  i - 0x0069 Latin Small Letter I
		{0x20,0x40,0x44,0x3D,0x00},		//   ( 74)  j - 0x006A Latin Small Letter J
		{0x7F,0x10,0x28,0x44,0x00},		//   ( 75)  k - 0x006B Latin Small Letter K
		{0x00,0x41,0x7F,0x40,0x00},		//   ( 76)  l - 0x006C Latin Small Letter L
		{0x7C,0x04,0x18,0x04,0x7C},		//   ( 77)  m - 0x006D Latin Small Letter M
		{0x7C,0x08,0x04,0x04,0x78},		//   ( 78)  n - 0x006E Latin Small Letter N
		{0x38,0x44,0x44,0x44,0x38},		//   ( 79)  o - 0x006F Latin Small Letter O
		{0x7C,0x14,0x14,0x14,0x08},		//   ( 80)  p - 0x0070 Latin Small Letter P
		{0x08,0x14,0x14,0x18,0x7C},		//   ( 81)  q - 0x0071 Latin Small Letter Q
		{0x7C,0x08,0x04,0x04,0x08},		//   ( 82)  r - 0x0072 Latin Small Letter R
		{0x48,0x54,0x54,0x54,0x20},		//   ( 83)  s - 0x0073 Latin Small Letter S
		{0x04,0x3F,0x44,0x40,0x20},		//   ( 84)  t - 0x0074 Latin Small Letter T
		{0x3C,0x40,0x40,0x20,0x7C},		//   ( 85)  u - 0x0075 Latin Small Letter U
		{0x1C,0x20,0x40,0x20,0x1C},		//   ( 86)  v - 0x0076 Latin Small Letter V
		{0x3C,0x40,0x30,0x40,0x3C},		//   ( 87)  w - 0x0077 Latin Small Letter W
		{0x44,0x28,0x10,0x28,0x44},		//   ( 88)  x - 0x0078 Latin Small Letter X
		{0x0C,0x50,0x50,0x50,0x3C},		//   ( 89)  y - 0x0079 Latin Small Letter Y
		{0x44,0x64,0x54,0x4C,0x44},		//   ( 90)  z - 0x007A Latin Small Letter Z
		{0x00,0x08,0x36,0x41,0x00},		//   ( 91)  { - 0x007B Left Curly Bracket
		{0x00,0x00,0x7F,0x00,0x00},		//   ( 92)  | - 0x007C Vertical Line
		{0x00,0x41,0x36,0x08,0x00},		//   ( 93)  } - 0x007D Right Curly Bracket
		{0x02,0x01,0x02,0x04,0x02},		//   ( 94)  ~ - 0x007E Tilde
		{0x3E,0x55,0x55,0x41,0x22},		//   ( 95)  C - 0x0080 <Control>
		{0x00,0x00,0x00,0x00,0x00},		//   ( 96)    - 0x00A0 No-Break Space
		{0x00,0x00,0x79,0x00,0x00},		//   ( 97)  ! - 0x00A1 Inverted Exclamation Mark
		{0x18,0x24,0x74,0x2E,0x24},		//   ( 98)  c - 0x00A2 Cent Sign
		{0x48,0x7E,0x49,0x42,0x40},		//   ( 99)  L - 0x00A3 Pound Sign
		{0x5D,0x22,0x22,0x22,0x5D},		//   (100)  o - 0x00A4 Currency Sign
		{0x15,0x16,0x7C,0x16,0x15},		//   (101)  Y - 0x00A5 Yen Sign
		{0x00,0x00,0x77,0x00,0x00},		//   (102)  | - 0x00A6 Broken Bar
		{0x0A,0x55,0x55,0x55,0x28},		//   (103)    - 0x00A7 Section Sign
		{0x00,0x01,0x00,0x01,0x00},		//   (104)  " - 0x00A8 Diaeresis
		{0x00,0x0A,0x0D,0x0A,0x04},		//   (105)    - 0x00AA Feminine Ordinal Indicator
		{0x08,0x14,0x2A,0x14,0x22},		//   (106) << - 0x00AB Left-Pointing Double Angle Quotation Mark
		{0x04,0x04,0x04,0x04,0x1C},		//   (107)    - 0x00AC Not Sign
		{0x00,0x08,0x08,0x08,0x00},		//   (108)  - - 0x00AD Soft Hyphen
		{0x01,0x01,0x01,0x01,0x01},		//   (109)    - 0x00AF Macron
		{0x00,0x02,0x05,0x02,0x00},		//   (110)    - 0x00B0 Degree Sign
		{0x44,0x44,0x5F,0x44,0x44},		//   (111) +- - 0x00B1 Plus-Minus Sign
		{0x00,0x00,0x04,0x02,0x01},		//   (112)  ` - 0x00B4 Acute Accent
		{0x7E,0x20,0x20,0x10,0x3E},		//   (113)  u - 0x00B5 Micro Sign
		{0x06,0x0F,0x7F,0x00,0x7F},		//   (114)    - 0x00B6 Pilcrow Sign
		{0x00,0x18,0x18,0x00,0x00},		//   (115)  . - 0x00B7 Middle Dot
		{0x00,0x40,0x50,0x20,0x00},		//   (116)    - 0x00B8 Cedilla
		{0x00,0x0A,0x0D,0x0A,0x00},		//   (117)    - 0x00BA Masculine Ordinal Indicator
		{0x22,0x14,0x2A,0x14,0x08},		//   (118) >> - 0x00BB Right-Pointing Double Angle Quotation Mark
		{0x17,0x08,0x34,0x2A,0x7D},		//   (119) /4 - 0x00BC Vulgar Fraction One Quarter
		{0x17,0x08,0x04,0x6A,0x59},		//   (120) /2 - 0x00BD Vulgar Fraction One Half
		{0x30,0x48,0x45,0x40,0x20},		//   (121)  ? - 0x00BF Inverted Question Mark
		{0x70,0x29,0x26,0x28,0x70},		//   (122) `A - 0x00C0 Latin Capital Letter A with Grave
		{0x70,0x28,0x26,0x29,0x70},		//   (123) 'A - 0x00C1 Latin Capital Letter A with Acute
		{0x70,0x2A,0x25,0x2A,0x70},		//   (124) ^A - 0x00C2 Latin Capital Letter A with Circumflex
		{0x72,0x29,0x26,0x29,0x70},		//   (125) ~A - 0x00C3 Latin Capital Letter A with Tilde
		{0x70,0x29,0x24,0x29,0x70},		//   (126) "A - 0x00C4 Latin Capital Letter A with Diaeresis
		{0x70,0x2A,0x2D,0x2A,0x70},		//   (127)  A - 0x00C5 Latin Capital Letter A with Ring Above
		{0x7E,0x11,0x7F,0x49,0x49},		//   (128) AE - 0x00C6 Latin Capital Letter Ae
		{0x0E,0x51,0x51,0x71,0x11},		//   (129)  C - 0x00C7 Latin Capital Letter C with Cedilla
		{0x7C,0x55,0x56,0x54,0x44},		//   (130) `E - 0x00C8 Latin Capital Letter E with Grave
		{0x7C,0x55,0x56,0x54,0x44},		//   (131) 'E - 0x00C9 Latin Capital Letter E with Acute
		{0x7C,0x56,0x55,0x56,0x44},		//   (132) ^E - 0x00CA Latin Capital Letter E with Circumflex
		{0x7C,0x55,0x54,0x55,0x44},		//   (133) "E - 0x00CB Latin Capital Letter E with Diaeresis
		{0x00,0x45,0x7E,0x44,0x00},		//   (134) `I - 0x00CC Latin Capital Letter I with Grave
		{0x00,0x44,0x7E,0x45,0x00},		//   (135) 'I - 0x00CD Latin Capital Letter I with Acute
		{0x00,0x46,0x7D,0x46,0x00},		//   (136) ^I - 0x00CE Latin Capital Letter I with Circumflex
		{0x00,0x45,0x7C,0x45,0x00},		//   (137) "I - 0x00CF Latin Capital Letter I with Diaeresis
		{0x7F,0x49,0x49,0x41,0x3E},		//   (138)  D - 0x00D0 Latin Capital Letter Eth
		{0x7C,0x0A,0x11,0x22,0x7D},		//   (139) ~N - 0x00D1 Latin Capital Letter N with Tilde
		{0x38,0x45,0x46,0x44,0x38},		//   (140) `O - 0x00D2 Latin Capital Letter O with Grave
		{0x38,0x44,0x46,0x45,0x38},		//   (141) 'O - 0x00D3 Latin Capital Letter O with Acute
		{0x38,0x46,0x45,0x46,0x38},		//   (142) ^O - 0x00D4 Latin Capital Letter O with Circumflex
		{0x38,0x46,0x45,0x46,0x39},		//   (143) ~O - 0x00D5 Latin Capital Letter O with Tilde
		{0x38,0x45,0x44,0x45,0x38},		//   (144) "O - 0x00D6 Latin Capital Letter O with Diaeresis
		{0x22,0x14,0x08,0x14,0x22},		//   (145)  x - 0x00D7 Multiplcation Sign
		{0x2E,0x51,0x49,0x45,0x3A},		//   (146)  O - 0x00D8 Latin Capital Letter O with Stroke
		{0x3C,0x41,0x42,0x40,0x3C},		//   (147) `U - 0x00D9 Latin Capital Letter U with Grave
		{0x3C,0x40,0x42,0x41,0x3C},		//   (148) 'U - 0x00DA Latin Capital Letter U with Acute
		{0x3C,0x42,0x41,0x42,0x3C},		//   (149) ^U - 0x00DB Latin Capital Letter U with Circumflex
		{0x3C,0x41,0x40,0x41,0x3C},		//   (150) "U - 0x00DC Latin Capital Letter U with Diaeresis
		{0x0C,0x10,0x62,0x11,0x0C},		//   (151) `Y - 0x00DD Latin Capital Letter Y with Acute
		{0x7F,0x12,0x12,0x12,0x0C},		//   (152)  P - 0x00DE Latin Capital Letter Thom
		{0x40,0x3E,0x01,0x49,0x36},		//   (153)  B - 0x00DF Latin Capital Letter Sharp S
		{0x20,0x55,0x56,0x54,0x78},		//   (154) `a - 0x00E0 Latin Small Letter A with Grave
		{0x20,0x54,0x56,0x55,0x78},		//   (155) 'a - 0x00E1 Latin Small Letter A with Acute
		{0x20,0x56,0x55,0x56,0x78},		//   (156) ^a - 0x00E2 Latin Small Letter A with Circumflex
		{0x20,0x55,0x56,0x55,0x78},		//   (157) ~a - 0x00E3 Latin Small Letter A with Tilde
		{0x20,0x55,0x54,0x55,0x78},		//   (158) "a - 0x00E4 Latin Small Letter A with Diaeresis
		{0x20,0x56,0x57,0x56,0x78},		//   (159)  a - 0x00E5 Latin Small Letter A with Ring Above
		{0x24,0x54,0x78,0x54,0x58},		//   (160) ae - 0x00E6 Latin Small Letter Ae
		{0x0C,0x52,0x52,0x72,0x13},		//   (161)  c - 0x00E7 Latin Small Letter c with Cedilla
		{0x38,0x55,0x56,0x54,0x18},		//   (162) `e - 0x00E8 Latin Small Letter E with Grave
		{0x38,0x54,0x56,0x55,0x18},		//   (163) 'e - 0x00E9 Latin Small Letter E with Acute
		{0x38,0x56,0x55,0x56,0x18},		//   (164) ^e - 0x00EA Latin Small Letter E with Circumflex
		{0x38,0x55,0x54,0x55,0x18},		//   (165) "e - 0x00EB Latin Small Letter E with Diaeresis
		{0x00,0x49,0x7A,0x40,0x00},		//   (166) `i - 0x00EC Latin Small Letter I with Grave
		{0x00,0x48,0x7A,0x41,0x00},		//   (167) 'i - 0x00ED Latin Small Letter I with Acute
		{0x00,0x4A,0x79,0x42,0x00},		//   (168) ^i - 0x00EE Latin Small Letter I with Circumflex
		{0x00,0x4A,0x78,0x42,0x00},		//   (169) "i - 0x00EF Latin Small Letter I with Diaeresis
		{0x31,0x4A,0x4E,0x4A,0x30},		//   (170)    - 0x00F0 Latin Small Letter Eth
		{0x7A,0x11,0x0A,0x09,0x70},		//   (171) ~n - 0x00F1 Latin Small Letter N with Tilde
		{0x30,0x49,0x4A,0x48,0x30},		//   (172) `o - 0x00F2 Latin Small Letter O with Grave
		{0x30,0x48,0x4A,0x49,0x30},		//   (173) 'o - 0x00F3 Latin Small Letter O with Acute
		{0x30,0x4A,0x49,0x4A,0x30},		//   (174) ^o - 0x00F4 Latin Small Letter O with Circumflex
		{0x30,0x4A,0x49,0x4A,0x31},		//   (175) ~o - 0x00F5 Latin Small Letter O with Tilde
		{0x30,0x4A,0x48,0x4A,0x30},		//   (176) "o - 0x00F6 Latin Small Letter O with Diaeresis
		{0x08,0x08,0x2A,0x08,0x08},		//   (177)  + - 0x00F7 Division Sign
		{0x38,0x64,0x54,0x4C,0x38},		//   (178)  o - 0x00F8 Latin Small Letter O with Stroke
		{0x38,0x41,0x42,0x20,0x78},		//   (179) `u - 0x00F9 Latin Small Letter U with Grave
		{0x38,0x40,0x42,0x21,0x78},		//   (180) 'u - 0x00FA Latin Small Letter U with Acute
		{0x38,0x42,0x41,0x22,0x78},		//   (181) ^u - 0x00FB Latin Small Letter U with Circumflex
		{0x38,0x42,0x40,0x22,0x78},		//   (182) "u - 0x00FC Latin Small Letter U with Diaeresis
		{0x0C,0x50,0x52,0x51,0x3C},		//   (183) 'y - 0x00FD Latin Small Letter Y with Acute
		{0x7E,0x14,0x14,0x14,0x08},		//   (184)  p - 0x00FE Latin Small Letter Thom
		{0x0C,0x51,0x50,0x51,0x3C},		//   (185) "y - 0x00FF Latin Small Letter Y with Diaeresis
		{0x1E,0x09,0x09,0x29,0x5E},		//   (186)  A - 0x0104 Latin Capital Letter A with Ogonek
		{0x08,0x15,0x15,0x35,0x4E},		//   (187)  a - 0x0105 Latin Small Letter A with Ogonek
		{0x38,0x44,0x46,0x45,0x20},		//   (188) 'C - 0x0106 Latin Capital Letter C with Acute
		{0x30,0x48,0x4A,0x49,0x20},		//   (189) 'c - 0x0107 Latin Small Letter C with Acute
		{0x38,0x45,0x46,0x45,0x20},		//   (190)  C - 0x010C Latin Capital Letter C with Caron
		{0x30,0x49,0x4A,0x49,0x20},		//   (191)  c - 0x010D Latin Small Letter C with Caron
		{0x7C,0x45,0x46,0x45,0x38},		//   (192)  D - 0x010E Latin Capital Letter D with Caron
		{0x20,0x50,0x50,0x7C,0x03},		//   (193) d' - 0x010F Latin Small Letter D with Caron
		{0x1F,0x15,0x15,0x35,0x51},		//   (194)  E - 0x0118 Latin Capital Letter E with Ogonek
		{0x0E,0x15,0x15,0x35,0x46},		//   (195)  e - 0x0119 Latin Small Letter E with Ogonek
		{0x7C,0x55,0x56,0x55,0x44},		//   (196)  E - 0x011A Latin Capital Letter E with Caron
		{0x38,0x55,0x56,0x55,0x18},		//   (197)  e - 0x011B Latin Small Letter E with Caron
		{0x00,0x44,0x7C,0x40,0x00},		//   (198)  i - 0x0131 Latin Small Letter Dotless I
		{0x7F,0x48,0x44,0x40,0x40},		//   (199)  L - 0x0141 Latin Capital Letter L with Stroke
		{0x00,0x49,0x7F,0x44,0x00},		//   (200)  l - 0x0142 Latin Small Letter L with Stroke
		{0x7C,0x08,0x12,0x21,0x7C},		//   (201) 'N - 0x0143 Latin Capital Letter N with Acute
		{0x78,0x10,0x0A,0x09,0x70},		//   (202) 'n - 0x0144 Latin Small Letter N with Acute
		{0x7C,0x09,0x12,0x21,0x7C},		//   (203)  N - 0x0147 Latin Capital Letter N with Caron
		{0x78,0x11,0x0A,0x09,0x70},		//   (204)  n - 0x0148 Latin Small Letter N with Caron
		{0x38,0x47,0x44,0x47,0x38},		//   (205) "O - 0x0150 Latin Capital Letter O with Double Acute
		{0x30,0x4B,0x48,0x4B,0x30},		//   (206) "o - 0x0151 Latin Small Letter O with Double Acute
		{0x3E,0x41,0x7F,0x49,0x49},		//   (207) OE - 0x0152 Latin Capital Ligature Oe
		{0x38,0x44,0x38,0x54,0x58},		//   (208) oe - 0x0153 Latin Small Ligature Oe
		{0x7C,0x15,0x16,0x35,0x48},		//   (209)  R - 0x0158 Latin Capital Letter R with Caron
		{0x78,0x11,0x0A,0x09,0x10},		//   (210)  r - 0x0159 Latin Small Letter R with Caron
		{0x48,0x54,0x56,0x55,0x20},		//   (211) 'S - 0x015A Latin Capital Letter S with Acute
		{0x20,0x48,0x56,0x55,0x20},		//   (212) 's - 0x015B Latin Small Letter S with Acute
		{0x48,0x55,0x56,0x55,0x20},		//   (213)  S - 0x0160 Latin Capital Letter S with Caron
		{0x20,0x49,0x56,0x55,0x20},		//   (214)  s - 0x0161 Latin Small Letter S with Caron
		{0x04,0x05,0x7E,0x05,0x04},		//   (215)  T - 0x0164 Latin Capital Letter T with Caron
		{0x08,0x3C,0x48,0x22,0x01},		//   (216) t' - 0x0165 Latin Small Letter T with Caron
		{0x3C,0x42,0x45,0x42,0x3C},		//   (217)  U - 0x016E Latin Capital Letter U with Ring Above
		{0x38,0x42,0x45,0x22,0x78},		//   (218)  u - 0x016F Latin Small Letter U with Ring Above
		{0x3C,0x43,0x40,0x43,0x3C},		//   (219) "U - 0x0170 Latin Capital Letter U with Double Acute
		{0x38,0x43,0x40,0x23,0x78},		//   (220) "u - 0x0171 Latin Small Letter U with Double Acute
		{0x0C,0x11,0x60,0x11,0x0C},		//   (221) "Y - 0x0178 Latin Capital Letter Y with Diaeresis
		{0x44,0x66,0x55,0x4C,0x44},		//   (222) 'Z - 0x0179 Latin Capital Letter Z with Acute
		{0x48,0x6A,0x59,0x48,0x00},		//   (223) 'z - 0x017A Latin Small Letter Z with Acute
		{0x44,0x64,0x55,0x4C,0x44},		//   (224)  Z - 0x017B Latin Capital Letter Z with Dot Above
		{0x48,0x68,0x5A,0x48,0x00},		//   (225)  z - 0x017C Latin Small Letter Z with Dot Above
		{0x44,0x65,0x56,0x4D,0x44},		//   (226)  Z - 0x017D Latin Capital Letter Z with Caron
		{0x48,0x69,0x5A,0x49,0x00},		//   (227)  z - 0x017E Latin Small Letter Z with Caron
		{0x00,0x02,0x01,0x02,0x00},		//   (228)  ^ - 0x02C6 Modifier Letter Circumflex Accent
		{0x00,0x01,0x02,0x01,0x00},		//   (229)    - 0x02C7 Caron
		{0x00,0x01,0x01,0x01,0x00},		//   (230)    - 0x02C9 Modifier Letter Macron
		{0x01,0x02,0x02,0x01,0x00},		//   (231)    - 0x02D8 Breve
		{0x00,0x00,0x01,0x00,0x00},		//   (232)    - 0x02D9 Dot Above
		{0x00,0x02,0x05,0x02,0x00},		//   (233)    - 0x02DA Ring Above
		{0x02,0x01,0x02,0x01,0x00},		//   (234)  ~ - 0x02DC Small Tilde
		{0x7F,0x05,0x15,0x3A,0x50},		//   (235) Pt - 0x20A7 Peseta Sign
		{0x3E,0x55,0x55,0x41,0x22},		//   (236)  C - 0x20AC Euro Sign
		{0x18,0x14,0x08,0x14,0x0C},		//   (237)    - 0x221E Infinity
		{0x44,0x4A,0x4A,0x51,0x51},		//   (238)  < - 0x2264 Less-Than or Equal to
		{0x51,0x51,0x4A,0x4A,0x44},		//   (239)  > - 0x2265 Greater-Than or Equal to
		{0x74,0x42,0x41,0x42,0x74},		//   (240)    - 0x2302 House
};

const unsigned char pg9616::largefont[95][8][2] = { //Bitstream Vera Bold
	{{0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}},
	{{0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0xfe, 0x19}, {0xfe, 0x19}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}},
	{{0x0, 0x0}, {0x1e, 0x0}, {0x1e, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0x1e, 0x0}, {0x1e, 0x0}, {0x0, 0x0}},
	{{0x30, 0x1b}, {0xb0, 0x1f}, {0xf8, 0x3}, {0x3e, 0x3}, {0x32, 0x1f}, {0xf0, 0xf}, {0xfe, 0x3}, {0x3e, 0x3}},
	{{0x70, 0xc}, {0xf8, 0x18}, {0xd8, 0x18}, {0xfe, 0x7f}, {0x98, 0x19}, {0x98, 0x1f}, {0x0, 0xf}, {0x0, 0x0}},
	{{0x1c, 0x1}, {0xa2, 0x0}, {0xa2, 0x0}, {0xa2, 0xe}, {0x5c, 0x11}, {0x40, 0x11}, {0x20, 0x11}, {0x20, 0xe}},
	{{0x0, 0x7}, {0xdc, 0xf}, {0x7e, 0x1c}, {0xe6, 0x18}, {0xc6, 0x19}, {0x86, 0x1f}, {0xc, 0x1e}, {0x80, 0x1f}},
	{{0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0x1e, 0x0}, {0x1e, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}},
	{{0x0, 0x0}, {0x0, 0x0}, {0xe0, 0x7}, {0xfc, 0x3f}, {0x1e, 0x78}, {0x2, 0x40}, {0x0, 0x0}, {0x0, 0x0}},
	{{0x0, 0x0}, {0x2, 0x40}, {0x1e, 0x78}, {0xfc, 0x3f}, {0xe0, 0x7}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}},
	{{0x48, 0x0}, {0x78, 0x0}, {0x30, 0x0}, {0xfe, 0x1}, {0x30, 0x0}, {0x78, 0x0}, {0x48, 0x0}, {0x0, 0x0}},
	{{0x80, 0x1}, {0x80, 0x1}, {0x80, 0x1}, {0xf0, 0xf}, {0xf0, 0xf}, {0x80, 0x1}, {0x80, 0x1}, {0x80, 0x1}},
	{{0x0, 0x0}, {0x0, 0x0}, {0x0, 0x40}, {0x0, 0x7c}, {0x0, 0x3c}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}},
	{{0x0, 0x0}, {0x0, 0x3}, {0x0, 0x3}, {0x0, 0x3}, {0x0, 0x3}, {0x0, 0x3}, {0x0, 0x0}, {0x0, 0x0}},
	{{0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x1c}, {0x0, 0x1c}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}},
	{{0x0, 0x20}, {0x0, 0x38}, {0x0, 0x1e}, {0xc0, 0x7}, {0xf0, 0x1}, {0x3c, 0x0}, {0xe, 0x0}, {0x2, 0x0}},
	{{0xf0, 0x3}, {0xfc, 0xf}, {0xe, 0x1c}, {0x06, 0x18}, {0x06, 0x18}, {0xe, 0x1c}, {0xfc, 0xf}, {0xf8, 0x7}},
	{{0x0, 0x18}, {0xc, 0x18}, {0x6, 0x18}, {0xfe, 0x1f}, {0xfe, 0x1f}, {0x0, 0x18}, {0x0, 0x18}, {0x0, 0x18}},
	{{0xc, 0x18}, {0x6, 0x1c}, {0x6, 0x1e}, {0x6, 0x1b}, {0x86, 0x19}, {0xc6, 0x18}, {0x7c, 0x18}, {0x38, 0x18}},
	{{0xc, 0xc}, {0x6, 0x18}, {0xc6, 0x18}, {0xc6, 0x18}, {0xc6, 0x18}, {0xc6, 0x19}, {0xfc, 0xf}, {0x38, 0xf}},
	{{0x80, 0x3}, {0xc0, 0x3}, {0x70, 0x3}, {0x18, 0x3}, {0xe, 0x3}, {0xfe, 0x1f}, {0xfe, 0x1f}, {0x0, 0x3}},
	{{0xfe, 0xc}, {0x7e, 0x18}, {0x66, 0x18}, {0x66, 0x18}, {0x66, 0x18}, {0xe6, 0x1c}, {0xc6, 0xf}, {0x80, 0x7}},
	{{0xf0, 0x7}, {0xfc, 0xf}, {0xce, 0x1c}, {0x66, 0x18}, {0x66, 0x18}, {0xe6, 0x1c}, {0xcc, 0xf}, {0x80, 0x7}},
	{{0x6, 0x0}, {0x6, 0x10}, {0x6, 0x1c}, {0x6, 0xf}, {0xe6, 0x3}, {0xfe, 0x0}, {0x3e, 0x0}, {0xe, 0x0}},
	{{0x38, 0xf}, {0xfc, 0xf}, {0xc6, 0x18}, {0xc6, 0x18}, {0xc6, 0x18}, {0xc6, 0x18}, {0xfc, 0xf}, {0x38, 0xf}},
	{{0x78, 0x0}, {0xfc, 0xc}, {0xce, 0x19}, {0x86, 0x19}, {0x86, 0x19}, {0xce, 0x1c}, {0xfc, 0xf}, {0xf8, 0x3}},
	{{0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0xe0, 0x1c}, {0xe0, 0x1c}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}},
	{{0x0, 0x0}, {0x0, 0x0}, {0x0, 0x40}, {0xe0, 0x7c}, {0xe0, 0x3c}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}},
	{{0x80, 0x1}, {0x80, 0x1}, {0xc0, 0x3}, {0x40, 0x2}, {0x60, 0x6}, {0x60, 0x6}, {0x20, 0x4}, {0x30, 0xc}},
	{{0x60, 0x6}, {0x60, 0x6}, {0x60, 0x6}, {0x60, 0x6}, {0x60, 0x6}, {0x60, 0x6}, {0x60, 0x6}, {0x60, 0x6}},
	{{0x30, 0xc}, {0x20, 0x4}, {0x60, 0x6}, {0x60, 0x6}, {0x40, 0x2}, {0xc0, 0x3}, {0x80, 0x1}, {0x80, 0x1}},
	{{0xc, 0x0}, {0x6, 0x0}, {0x86, 0x1b}, {0xc6, 0x1b}, {0x66, 0x0}, {0x7e, 0x0}, {0x1c, 0x0}, {0x0, 0x0}},
	{{0xf0, 0x1f}, {0x38, 0x38}, {0x9c, 0x73}, {0xcc, 0x67}, {0xcc, 0x66}, {0xdc, 0x66}, {0xf8, 0x77}, {0xf0, 0x27}},
	{{0x0, 0x18}, {0xc0, 0x1f}, {0xfc, 0xf}, {0x3e, 0x3}, {0x3e, 0x3}, {0xfc, 0xf}, {0xc0, 0x1f}, {0x0, 0x18}},
	{{0xfe, 0x1f}, {0xfe, 0x1f}, {0xc6, 0x18}, {0xc6, 0x18}, {0xc6, 0x18}, {0xc6, 0x18}, {0xfc, 0x1f}, {0x3c, 0xf}},
	{{0xf0, 0x3}, {0xfc, 0xf}, {0xc, 0xc}, {0x6, 0x18}, {0x6, 0x18}, {0x6, 0x18}, {0x6, 0x18}, {0xc, 0xc}},
	{{0xfe, 0x1f}, {0xfe, 0x1f}, {0x6, 0x18}, {0x6, 0x18}, {0x6, 0x18}, {0xc, 0xc}, {0xfc, 0xf}, {0xf0, 0x3}},
	{{0xfe, 0x1f}, {0xfe, 0x1f}, {0xc6, 0x18}, {0xc6, 0x18}, {0xc6, 0x18}, {0xc6, 0x18}, {0xc6, 0x18}, {0x6, 0x18}},
	{{0xfe, 0x1f}, {0xfe, 0x1f}, {0xc6, 0x0}, {0xc6, 0x0}, {0xc6, 0x0}, {0xc6, 0x0}, {0xc6, 0x0}, {0x6, 0x0}},
	{{0xf0, 0x3}, {0xfc, 0xf}, {0xc, 0xc}, {0x6, 0x18}, {0x86, 0x19}, {0x86, 0x19}, {0x86, 0x1f}, {0x8c, 0xf}},
	{{0xfe, 0x1f}, {0xfe, 0x1f}, {0xc0, 0x0}, {0xc0, 0x0}, {0xc0, 0x0}, {0xc0, 0x0}, {0xfe, 0x1f}, {0xfe, 0x1f}},
	{{0x0, 0x0}, {0x6, 0x18}, {0x6, 0x18}, {0xfe, 0x1f}, {0xfe, 0x1f}, {0x6, 0x18}, {0x6, 0x18}, {0x0, 0x0}},
	{{0x0, 0xc}, {0x0, 0x18}, {0x0, 0x18}, {0x6, 0x18}, {0x6, 0x18}, {0x6, 0x18}, {0xfe, 0xf}, {0xfe, 0xf}},
	{{0xfe, 0x1f}, {0xfe, 0x1f}, {0xe0, 0x0}, {0xf0, 0x0}, {0xfc, 0x3}, {0xe, 0xf}, {0x6, 0x1e}, {0x2, 0x18}},
	{{0xfe, 0x1f}, {0xfe, 0x1f}, {0x0, 0x18}, {0x0, 0x18}, {0x0, 0x18}, {0x0, 0x18}, {0x0, 0x18}, {0x0, 0x18}},
	{{0xfe, 0x1f}, {0xfe, 0x1f}, {0x3e, 0x0}, {0xf0, 0x1}, {0xf0, 0x1}, {0x3e, 0x0}, {0xfe, 0x1f}, {0xfe, 0x1f}},
	{{0xfe, 0x1f}, {0xfe, 0x1f}, {0x1e, 0x0}, {0xf0, 0x0}, {0xc0, 0x3}, {0x0, 0x1e}, {0xfe, 0x1f}, {0xfe, 0x1f}},
	{{0xf0, 0x3}, {0xfc, 0xf}, {0xe, 0x1c}, {0x6, 0x18}, {0x6, 0x18}, {0xe, 0x1c}, {0xfc, 0xf}, {0xf0, 0x3}},
	{{0xfe, 0x1f}, {0xfe, 0x1f}, {0xc6, 0x0}, {0xc6, 0x0}, {0xc6, 0x0}, {0xc6, 0x0}, {0x7c, 0x0}, {0x78, 0x0}},
	{{0xf0, 0x3}, {0xfc, 0xf}, {0xe, 0x1c}, {0x6, 0x18}, {0x6, 0x18}, {0xe, 0x3c}, {0xfc, 0x6f}, {0xf0, 0x7}},
	{{0xfe, 0x1f}, {0xfe, 0x1f}, {0xc6, 0x0}, {0xc6, 0x0}, {0xc6, 0x1}, {0xc6, 0x3}, {0xfc, 0x1f}, {0x3c, 0x1e}},
	{{0x38, 0xc}, {0x7c, 0x18}, {0xe6, 0x18}, {0xc6, 0x18}, {0xc6, 0x18}, {0xc6, 0x19}, {0x8c, 0xf}, {0x0, 0xf}},
	{{0x6, 0x0}, {0x6, 0x0}, {0x6, 0x0}, {0xfe, 0x1f}, {0xfe, 0x1f}, {0x6, 0x0}, {0x6, 0x0}, {0x6, 0x0}},
	{{0xfe, 0x7}, {0xfe, 0xf}, {0x0, 0x1c}, {0x0, 0x18}, {0x0, 0x18}, {0x0, 0x1c}, {0xfe, 0xf}, {0xfe, 0x7}},
	{{0x6, 0x0}, {0xfe, 0x0}, {0xfc, 0x1f}, {0x0, 0x1f}, {0x0, 0x1f}, {0xfc, 0x1f}, {0xfe, 0x0}, {0x6, 0x0}},
	{{0xfe, 0x1f}, {0xe0, 0x1f}, {0x0, 0x1e}, {0xf0, 0x1}, {0xf0, 0x1}, {0x0, 0x1e}, {0xe0, 0x1f}, {0xfe, 0x1f}},
	{{0x2, 0x10}, {0xe, 0x1c}, {0x3e, 0x1f}, {0xf8, 0x3}, {0xf8, 0x3}, {0x3e, 0x1f}, {0xe, 0x1c}, {0x2, 0x10}},
	{{0xe, 0x0}, {0x3e, 0x0}, {0x78, 0x0}, {0xe0, 0x1f}, {0xe0, 0x1f}, {0x78, 0x0}, {0x3e, 0x0}, {0xe, 0x0}},
	{{0x6, 0x1c}, {0x6, 0x1e}, {0x86, 0x1f}, {0xc6, 0x1b}, {0xf6, 0x18}, {0x7e, 0x18}, {0x1e, 0x18}, {0xe, 0x18}},
	{{0x0, 0x0}, {0x0, 0x0}, {0xfe, 0x7f}, {0xfe, 0x7f}, {0x2, 0x40}, {0x2, 0x40}, {0x0, 0x0}, {0x0, 0x0}},
	{{0x2, 0x0}, {0xe, 0x0}, {0x38, 0x0}, {0xe0, 0x0}, {0x80, 0x3}, {0x0, 0xe}, {0x0, 0x38}, {0x0, 0x20}},
	{{0x0, 0x0}, {0x2, 0x40}, {0x2, 0x40}, {0xfe, 0x7f}, {0xfe, 0x7f}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}},
	{{0x18, 0x0}, {0x1c, 0x0}, {0xe, 0x0}, {0x6, 0x0}, {0xe, 0x0}, {0x1c, 0x0}, {0x18, 0x0}, {0x10, 0x0}},
	{{0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}},
	{{0x0, 0x0}, {0x0, 0x0}, {0x2, 0x0}, {0x6, 0x0}, {0x4, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}},
	{{0x0, 0xe}, {0x60, 0x1f}, {0x30, 0x1b}, {0xb0, 0x19}, {0xb0, 0x19}, {0xb0, 0xd}, {0xf0, 0x1f}, {0xe0, 0x1f}},
	{{0xfe, 0x1f}, {0xfe, 0x1f}, {0x60, 0xc}, {0x30, 0x18}, {0x30, 0x18}, {0x70, 0x1c}, {0xe0, 0xf}, {0xc0, 0x7}},
	{{0xc0, 0x7}, {0xe0, 0xf}, {0x70, 0x1c}, {0x30, 0x18}, {0x30, 0x18}, {0x30, 0x18}, {0x30, 0x18}, {0x60, 0xc}},
	{{0xc0, 0x7}, {0xe0, 0xf}, {0x70, 0x1c}, {0x30, 0x18}, {0x30, 0x18}, {0x60, 0xc}, {0xfe, 0x1f}, {0xfe, 0x1f}},
	{{0xc0, 0x7}, {0xe0, 0xf}, {0xb0, 0x1d}, {0xb0, 0x19}, {0xb0, 0x19}, {0xb0, 0x19}, {0xe0, 0x19}, {0xc0, 0xd}},
	{{0x30, 0x0}, {0x30, 0x0}, {0xfc, 0x1f}, {0xfe, 0x1f}, {0x36, 0x0}, {0x36, 0x0}, {0x36, 0x0}, {0x0, 0x0}},
	{{0xc0, 0x7}, {0xe0, 0x6f}, {0x70, 0xdc}, {0x30, 0xd8}, {0x30, 0xd8}, {0x60, 0xcc}, {0xf0, 0xff}, {0xf0, 0x7f}},
	{{0xfe, 0x1f}, {0xfe, 0x1f}, {0x60, 0x0}, {0x30, 0x0}, {0x30, 0x0}, {0x30, 0x0}, {0xf0, 0x1f}, {0xe0, 0x1f}},
	{{0x0, 0x18}, {0x30, 0x18}, {0x30, 0x18}, {0xf6, 0x1f}, {0xf6, 0x1f}, {0x0, 0x18}, {0x0, 0x18}, {0x0, 0x18}},
	{{0x0, 0xc0}, {0x30, 0xc0}, {0x30, 0xc0}, {0xf6, 0xff}, {0xf6, 0x7f}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}},
	{{0xfe, 0x1f}, {0xfe, 0x1f}, {0x80, 0x1}, {0xe0, 0x3}, {0x70, 0x7}, {0x30, 0x1e}, {0x10, 0x18}, {0x0, 0x10}},
	{{0x6, 0x0}, {0x6, 0x0}, {0xfe, 0xf}, {0xfe, 0x1f}, {0x0, 0x18}, {0x0, 0x18}, {0x0, 0x18}, {0x0, 0x0}},
	{{0xf0, 0x1f}, {0xf0, 0x1f}, {0x30, 0x0}, {0xf0, 0x1f}, {0xe0, 0x1f}, {0x30, 0x0}, {0xf0, 0x1f}, {0xe0, 0x1f}},
	{{0xf0, 0x1f}, {0xf0, 0x1f}, {0x60, 0x0}, {0x30, 0x0}, {0x30, 0x0}, {0x30, 0x0}, {0xf0, 0x1f}, {0xe0, 0x1f}},
	{{0xc0, 0x7}, {0xe0, 0xf}, {0x70, 0x1c}, {0x30, 0x18}, {0x30, 0x18}, {0x70, 0x1c}, {0xe0, 0xf}, {0xc0, 0x7}},
	{{0xf0, 0xff}, {0xf0, 0xff}, {0x60, 0xc}, {0x30, 0x18}, {0x30, 0x18}, {0x70, 0x1c}, {0xe0, 0xf}, {0xc0, 0x7}},
	{{0xc0, 0x7}, {0xe0, 0xf}, {0x70, 0x1c}, {0x30, 0x18}, {0x30, 0x18}, {0x60, 0xc}, {0xf0, 0xff}, {0xf0, 0xff}},
	{{0x0, 0x0}, {0xf0, 0x1f}, {0xf0, 0x1f}, {0x60, 0x0}, {0x30, 0x0}, {0x30, 0x0}, {0x30, 0x0}, {0x30, 0x0}},
	{{0xe0, 0xc}, {0xf0, 0x19}, {0xb0, 0x19}, {0xb0, 0x19}, {0xb0, 0x19}, {0xb0, 0x1b}, {0x30, 0x1f}, {0x60, 0xe}},
	{{0x30, 0x0}, {0x30, 0x0}, {0xfc, 0xf}, {0xfc, 0x1f}, {0x30, 0x18}, {0x30, 0x18}, {0x30, 0x18}, {0x0, 0x0}},
	{{0xf0, 0xf}, {0xf0, 0x1f}, {0x0, 0x18}, {0x0, 0x18}, {0x0, 0x18}, {0x0, 0xc}, {0xf0, 0x1f}, {0xf0, 0x1f}},
	{{0x30, 0x0}, {0xf0, 0x1}, {0xe0, 0xf}, {0x0, 0x1e}, {0x0, 0x1e}, {0xe0, 0xf}, {0xf0, 0x1}, {0x30, 0x0}},
	{{0xf0, 0x7}, {0x0, 0x1f}, {0x0, 0x1e}, {0xc0, 0x3}, {0xc0, 0x3}, {0x0, 0x1e}, {0x0, 0x1f}, {0xf0, 0x7}},
	{{0x10, 0x10}, {0x30, 0x18}, {0xf0, 0x1e}, {0xc0, 0x7}, {0xc0, 0x7}, {0xf0, 0x1e}, {0x30, 0x18}, {0x10, 0x10}},
	{{0x10, 0x0}, {0xf0, 0xc0}, {0xf0, 0xc3}, {0x80, 0xff}, {0x0, 0x3f}, {0xf0, 0xf}, {0xf0, 0x1}, {0x30, 0x0}},
	{{0x30, 0x18}, {0x30, 0x1c}, {0x30, 0x1e}, {0x30, 0x1b}, {0xb0, 0x19}, {0xf0, 0x18}, {0x70, 0x18}, {0x30, 0x18}},
	{{0x0, 0x0}, {0x0, 0x1}, {0x0, 0x1}, {0xfc, 0x7e}, {0xfe, 0xfe}, {0x2, 0x80}, {0x2, 0x80}, {0x0, 0x0}},
	{{0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}, {0xfe, 0xff}, {0xfe, 0xff}, {0x0, 0x0}, {0x0, 0x0}, {0x0, 0x0}},
	{{0x0, 0x0}, {0x2, 0x80}, {0x2, 0x80}, {0xfe, 0xfe}, {0xfc, 0x7e}, {0x0, 0x1}, {0x0, 0x1}, {0x0, 0x0}},
	{{0x0, 0x0}, {0x1c, 0x0}, {0x3e, 0x0}, {0x36, 0x0}, {0x3e, 0x0}, {0x1c, 0x0}, {0x0, 0x0}, {0x0, 0x0}},
};

const unsigned char pg9616::logo[12][2] = {{0xf, 0xc0}, {0xf, 0xf0}, {0xf, 0xfc}, {0xf, 0xff}, 
										   {0xc3, 0xff}, {0xf0, 0xff}, {0xfc, 0xff}, {0xff, 0xf3}, 
										   {0xff, 0xf0}, {0x3f, 0xf0}, {0x7, 0xf0}, {0x1, 0xf0}};
const unsigned char pg9616::logoname[50][2] = {{0x30, 0x18}, {0x30, 0x1c}, {0x30, 0x1f}, {0xb0, 0x1b}, 
		                                       {0xf0, 0x19}, {0x70, 0x18}, {0x30, 0x18}, {0x0, 0x0}, 
											   {0x30, 0x0}, {0xf0, 0xc0}, {0xc0, 0xe3}, {0x0, 0x7f}, 
											   {0x0, 0x3e}, {0x80, 0xf}, {0xf0, 0x1}, {0x70, 0x0}, 
											   {0x0, 0x0}, {0x0, 0x0}, {0xfe, 0xf}, {0xfe, 0x1f}, 
											   {0x0, 0x10}, {0x0, 0x0}, {0x30, 0x0}, {0xf6, 0x1f}, 
											   {0xf6, 0x1f}, {0x0, 0x0}, {0x0, 0x0}, {0xe0, 0x4d}, 
											   {0xf0, 0xdf}, {0x30, 0xdb}, {0x30, 0xcb}, {0x30, 0xdb}, 
											   {0xf0, 0xfb}, {0xd0, 0x79}, {0x0, 0x0}, {0x0, 0x0}, 
											   {0xfe, 0x1f}, {0xfe, 0x1f}, {0x30, 0x0}, {0x30, 0x0}, 
											   {0x30, 0x0}, {0xf0, 0x1f}, {0xe0, 0x1f}, {0x0, 0x0}, 
											   {0x0, 0x0}, {0x30, 0x0}, {0xf8, 0xf}, {0xfc, 0x1f}, 
											   {0x30, 0x18}, {0x10, 0x18}};

